#!/usr/bin/env bash

set -e
set -u
set -o pipefail

if ! [[ "$#" -eq 4 ]]; then
  echo """
  Desc:  Creates a new Draupnir instance with given parameters
  Usage: $(basename "$0") ROOT IMAGE_ID INSTANCE_ID PORT
  Example:

      $(basename "$0") /draupnir 9 999 6543

  """
  exit 1
fi

die_and_stop() {
  echo "$*" 1>&2

  echo "Stopping instance"
  sudo -u draupnir-instance "$PG_CTL" -w -D "$INSTANCE_PATH" stop

  exit 1
}

PG_CTL=/usr/lib/postgresql/14/bin/pg_ctl

ROOT=$1
IMAGE_ID=$2
INSTANCE_ID=$3
PORT=$4

# TODO: validate input

SNAPSHOT_PATH="${ROOT}/image_snapshots/${IMAGE_ID}"
INSTANCE_PATH="${ROOT}/instances/${INSTANCE_ID}"

set -x

btrfs subvolume snapshot "$SNAPSHOT_PATH" "$INSTANCE_PATH"

# The instance directory must be readable by Draupnir, so that the certificates
# can be read and served in the API response.
sudo chown draupnir-instance:draupnir "$INSTANCE_PATH"
sudo chmod g+rx "$INSTANCE_PATH"

# Create a certificate authority
openssl req -new -nodes -text \
  -out "${INSTANCE_PATH}/ca.csr" -keyout "${INSTANCE_PATH}/ca.key" \
  -subj "/CN=Draupnir instance ${INSTANCE_ID} certification authority"
chmod 600 "${INSTANCE_PATH}/ca.key"

openssl x509 -req -in "${INSTANCE_PATH}/ca.csr" -text -days 30 \
  -extfile /etc/ssl/openssl.cnf -extensions v3_ca \
  -signkey "${INSTANCE_PATH}/ca.key" -out "${INSTANCE_PATH}/ca.crt"
chown draupnir-instance "${INSTANCE_PATH}/ca.crt"

# Create a server certificate for the instance
openssl req -new -nodes -text \
  -out "${INSTANCE_PATH}/server.csr" -keyout "${INSTANCE_PATH}/server.key" \
  -subj "/CN=Draupnir instance ${INSTANCE_ID} server"
chmod 600 "${INSTANCE_PATH}/server.key"

openssl x509 -req -in "${INSTANCE_PATH}/server.csr" -text -days 30 \
  -CA "${INSTANCE_PATH}/ca.crt" -CAkey "${INSTANCE_PATH}/ca.key" -CAcreateserial \
  -out "${INSTANCE_PATH}/server.crt"
chown draupnir-instance "${INSTANCE_PATH}/server.key" "${INSTANCE_PATH}/server.crt"

cat <<EOF >> "${INSTANCE_PATH}/postgresql.conf"
ssl_ca_file = 'ca.crt'
ssl_cert_file = 'server.crt'
ssl_key_file = 'server.key'
EOF

# Create client certificate
openssl req -new -nodes -text \
  -out "${INSTANCE_PATH}/client.csr" -keyout "${INSTANCE_PATH}/client.key" \
  -subj "/CN=Draupnir instance ${INSTANCE_ID} client"
chmod 600 "${INSTANCE_PATH}/client.key"

openssl x509 -req -in "${INSTANCE_PATH}/client.csr" -text -days 30 \
  -CA "${INSTANCE_PATH}/ca.crt" -CAkey "${INSTANCE_PATH}/ca.key" -CAcreateserial \
  -out "${INSTANCE_PATH}/client.crt"
# Draupnir must be able to read the cert and key, to serve to the client
chown draupnir "${INSTANCE_PATH}/client.key" "${INSTANCE_PATH}/client.crt"

# Place socket in the instance directory
echo "unix_socket_directories = '${INSTANCE_PATH}'" >> "${INSTANCE_PATH}/postgresql.conf"

# Temporarily disable connections, until we have validated that the instance
# has authentication correctly configured
cat <<EOF >> "${INSTANCE_PATH}/postgresql.auto.conf"
listen_addresses = 'localhost'
EOF
chmod 640 "${INSTANCE_PATH}/postgresql.auto.conf"

# Provision a pg_ident.conf, and ensure that it can't be edited
# The system username must match the CN provisioned in the client cert above.
cat > "${INSTANCE_PATH}/pg_ident.conf" <<EOF
# MAPNAME       SYSTEM-USERNAME                               PG-USERNAME
draupnir        "Draupnir instance ${INSTANCE_ID} client"     draupnir
EOF

chown root:draupnir-instance "${INSTANCE_PATH}/pg_ident.conf"
chmod 640 "${INSTANCE_PATH}/pg_ident.conf"
chattr +i "${INSTANCE_PATH}/pg_ident.conf"

sudo -u draupnir-instance $PG_CTL -w -D "$INSTANCE_PATH" -o "-p $PORT" -l "/var/log/postgresql-draupnir-instance/instance_$INSTANCE_ID" start

# Verify that our instance has the correct authentication restrictions, so that
# we can be sure it is not accessible to anyone not connecting in the expected
# manner.
PGSSLMODE=disable \
  psql -h localhost -p "$PORT" -U draupnir -d postgres -Atc 'SELECT now();' \
    && die_and_stop "ERROR: Able to connect via non-TLS connection" \
    || echo "INFO: Not able to connect via non-TLS connection"

PGSSLMODE=verify-ca \
  PGSSLROOTCERT="${INSTANCE_PATH}/ca.crt" \
  psql -h localhost -p "$PORT" -U draupnir -d postgres -Atc 'SELECT now();' \
    && die_and_stop "ERROR: Able to connect via TLS connection without client certificate" \
    || echo "INFO: Not able to connect without client certificate"

PGSSLMODE=verify-ca \
  PGSSLROOTCERT="${INSTANCE_PATH}/ca.crt" \
  PGSSLCERT="${INSTANCE_PATH}/client.crt" \
  PGSSLKEY="${INSTANCE_PATH}/client.key" \
  psql -h localhost -p "$PORT" -U draupnir -d postgres -Atc 'SELECT now();' \
    || die_and_stop "ERROR: Unable to connect via client-authenticated TLS connection"

# Ensure that the user we're logging in with does not have superuser privileges.
ISSUPERUSER=$(
  PGSSLMODE=verify-ca \
  PGSSLROOTCERT="${INSTANCE_PATH}/ca.crt" \
  PGSSLCERT="${INSTANCE_PATH}/client.crt" \
  PGSSLKEY="${INSTANCE_PATH}/client.key" \
  psql -h localhost -p "$PORT" -U draupnir -d postgres -Atc 'SELECT usesuper FROM pg_user WHERE usename = CURRENT_USER;' \
    || die_and_stop "ERROR: Unable to check superuser status"
)
[ "$ISSUPERUSER" == "f" ] || die_and_stop "ERROR: unexpected superuser status: '${ISSUPERUSER}'"

# Ensure that it's not possible to login with another user, e.g. postgres,
# which may have superuser privileges.
PGSSLMODE=verify-ca \
  PGSSLROOTCERT="${INSTANCE_PATH}/ca.crt" \
  PGSSLCERT="${INSTANCE_PATH}/client.crt" \
  PGSSLKEY="${INSTANCE_PATH}/client.key" \
  psql -h localhost -p "$PORT" -U postgres -d postgres -Atc 'SELECT now();' \
    && die_and_stop "ERROR: Able to connect with postgres user" \
    || echo "INFO: Not able to connect with postgres user"

rm -v "${INSTANCE_PATH}/postgresql.auto.conf"

sudo -u draupnir-instance $PG_CTL -w -D "$INSTANCE_PATH" -o "-p $PORT" -l "/var/log/postgresql-draupnir-instance/instance_$INSTANCE_ID" restart

set +x
