#!/usr/bin/env bash

set -e
set -u
set -o pipefail

if ! [[ "$#" -eq 4 ]]; then
  echo """
  Desc:  Prepares an image for launching instances
  Usage: $(basename "$0") ROOT IMAGE_ID PORT ANON_FILE
  Example:

      $(basename "$0") /draupnir 999 6543 anon.sql

  The steps taken are:

  1. Run draupnir-start-image to boot a PG if not already started
  2. Run the anonymisation script
  3. Stop postgres
  4. Take a BTRFS snapshot of the directory
  """
  exit 1
fi

PG_CTL=/usr/lib/postgresql/14/bin/pg_ctl
VACUUMDB=/usr/lib/postgresql/14/bin/vacuumdb
PSQL=/usr/bin/psql

ROOT=$1
ID=$2
PORT=$3
ANON_FILE=$4

# TODO: validate input

UPLOAD_PATH="${ROOT}/image_uploads/${ID}"
SNAPSHOT_PATH="${ROOT}/image_snapshots/${ID}"

set -x

# If we haven't started the image yet, we should do that now. The start script is a no-op
# if we've already started the image.
draupnir-start-image "${ROOT}" "${ID}" "${PORT}"

# Perform anonymisation. Do this before reassigning ownership, in case the
# anonymisation script creates new objects owned by the draupnir-admin user.
echo "Executing anonymisation script $ANON_FILE"
sudo cat "$ANON_FILE" | sudo -u postgres "$PSQL" -p "$PORT" --username=draupnir-admin postgres

echo "Vacuum all the databases in the cluster"
sudo -u postgres $VACUUMDB --all --port="$PORT" --jobs="$(nproc)"

# Reassign the ownership of all objects (databases, tables, views etc.) from
# the current user to the 'draupnir' user.
# An assumption is made that the 'postgres' user is the superuser that was
# created at initdb time, and therefore is skipped as it's not possible to
# reassign all objects owned by this user. If this assumption does not hold,
# then errors may be reported.
pushd /tmp
sudo -u postgres psql -U draupnir-admin -d postgres -p "$PORT" -v ON_ERROR_STOP=1 --echo-errors -qAtc "SELECT datname FROM pg_database WHERE datistemplate = false;" \
  | while read -r database; do
    sudo -u postgres psql -U draupnir-admin -d postgres -p "$PORT" -v ON_ERROR_STOP=1 --echo-errors -qAtc "SELECT usename FROM pg_user WHERE usename <> 'postgres';" \
    | while read -r user; do
      echo "Changing ownership of ${database}/${user}"
      sudo -u postgres psql -U draupnir-admin -d "$database" -p "$PORT" -v ON_ERROR_STOP=1 --echo-errors -qAtc 'REASSIGN OWNED BY "'"${user}"'" TO draupnir;'
  done
done
popd

echo "Turning back on fsync and hot_standby wal level"
sed -i \
  "s/wal_level = 'off'/wal_level = 'hot_standby'/; s/fsync = 'off'/fsync = 'on'/" \
  "${UPLOAD_PATH}/postgresql.conf"

# The 'draupnir-admin' user is no longer required
sudo -u postgres dropuser --port="$PORT" draupnir-admin

sudo -u postgres $PG_CTL -D "$UPLOAD_PATH" -w stop
sudo rm -f "${UPLOAD_PATH}/postmaster.pid"
sudo rm -f "${UPLOAD_PATH}/postmaster.opts"

# Install our own pg_hba.conf, and ensure that it cannot be modified
cat > "${UPLOAD_PATH}/pg_hba.conf" <<EOF
# NOTE: The cert auth method is essential - without this the Draupnir instance
# will be accessible to anyone with knowledge of the host and port.
# Do not edit this unless you are absolutely certain of the consequences.
local   all     all                             trust
hostssl all     draupnir        0.0.0.0/0       cert    map=draupnir
EOF

# Draupnir instances run as the draupnir-instance user
find "${UPLOAD_PATH}" -user postgres -exec chown draupnir-instance {} \;
find "${UPLOAD_PATH}" -group postgres -exec chgrp draupnir-instance {} \;

chown root:draupnir-instance "${UPLOAD_PATH}/pg_hba.conf"
chmod 640 "${UPLOAD_PATH}/pg_hba.conf"
chattr +i "${UPLOAD_PATH}/pg_hba.conf"

btrfs subvolume snapshot "$UPLOAD_PATH" "$SNAPSHOT_PATH"

set +x
